--- a/net/minecraft/world/level/block/TurtleEggBlock.java
+++ b/net/minecraft/world/level/block/TurtleEggBlock.java
@@ -51,29 +_,24 @@
         this.registerDefaultState(this.stateDefinition.any().setValue(HATCH, Integer.valueOf(0)).setValue(EGGS, Integer.valueOf(1)));
     }
 
-    @Override
-    public void stepOn(Level level, BlockPos pos, BlockState state, Entity entity) {
-        if (!entity.isSteppingCarefully()) {
-            this.destroyEgg(level, state, pos, entity, 100);
-        }
-
-        super.stepOn(level, pos, state, entity);
-    }
-
-    @Override
-    public void fallOn(Level level, BlockState state, BlockPos pos, Entity entity, float fallDistance) {
-        if (!(entity instanceof Zombie)) {
-            this.destroyEgg(level, state, pos, entity, 3);
-        }
-
-        super.fallOn(level, state, pos, entity, fallDistance);
-    }
-
     private void destroyEgg(Level level, BlockState state, BlockPos pos, Entity entity, int chance) {
         if (state.is(Blocks.TURTLE_EGG)
             && level instanceof ServerLevel serverLevel
             && this.canDestroyEgg(serverLevel, entity)
             && level.random.nextInt(chance) == 0) {
+            // CraftBukkit start - Step on eggs
+            org.bukkit.event.Cancellable cancellable;
+            if (entity instanceof Player) {
+                cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((Player) entity, org.bukkit.event.block.Action.PHYSICAL, pos, null, null, null);
+            } else {
+                cancellable = new org.bukkit.event.entity.EntityInteractEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(level, pos));
+                level.getCraftServer().getPluginManager().callEvent((org.bukkit.event.entity.EntityInteractEvent) cancellable);
+            }
+
+            if (cancellable.isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
             this.decreaseEggs(serverLevel, pos, state);
         }
     }
@@ -90,33 +_,6 @@
         }
     }
 
-    @Override
-    protected void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
-        if (this.shouldUpdateHatchLevel(level) && onSand(level, pos)) {
-            int hatchValue = state.getValue(HATCH);
-            if (hatchValue < 2) {
-                level.playSound(null, pos, SoundEvents.TURTLE_EGG_CRACK, SoundSource.BLOCKS, 0.7F, 0.9F + random.nextFloat() * 0.2F);
-                level.setBlock(pos, state.setValue(HATCH, Integer.valueOf(hatchValue + 1)), 2);
-                level.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(state));
-            } else {
-                level.playSound(null, pos, SoundEvents.TURTLE_EGG_HATCH, SoundSource.BLOCKS, 0.7F, 0.9F + random.nextFloat() * 0.2F);
-                level.removeBlock(pos, false);
-                level.gameEvent(GameEvent.BLOCK_DESTROY, pos, GameEvent.Context.of(state));
-
-                for (int i = 0; i < state.getValue(EGGS); i++) {
-                    level.levelEvent(2001, pos, Block.getId(state));
-                    Turtle turtle = EntityType.TURTLE.create(level, EntitySpawnReason.BREEDING);
-                    if (turtle != null) {
-                        turtle.setAge(-24000);
-                        turtle.setHomePos(pos);
-                        turtle.moveTo(pos.getX() + 0.3 + i * 0.2, pos.getY(), pos.getZ() + 0.3, 0.0F, 0.0F);
-                        level.addFreshEntity(turtle);
-                    }
-                }
-            }
-        }
-    }
-
     public static boolean onSand(BlockGetter level, BlockPos pos) {
         return isSand(level, pos.below());
     }
@@ -138,8 +_,8 @@
     }
 
     @Override
-    public void playerDestroy(Level level, Player player, BlockPos pos, BlockState state, @Nullable BlockEntity te, ItemStack stack) {
-        super.playerDestroy(level, player, pos, state, te, stack);
+    public void playerDestroy(Level level, Player player, BlockPos pos, BlockState state, @Nullable BlockEntity te, ItemStack stack, boolean includeDrops, boolean dropExp) { // Paper - fix drops not preventing stats/food exhaustion
+        super.playerDestroy(level, player, pos, state, te, stack, includeDrops, dropExp); // Paper - fix drops not preventing stats/food exhaustion
         this.decreaseEggs(level, pos, state);
     }
 
